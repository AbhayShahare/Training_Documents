							
#################
15th Sep. 2023
#################	

		DevOps ::
		
			CI/Cd/CD
			
		Virtual Machines :::
		Virtualization ?
		
		VMs in AWS Cloud Platform !!!!
		
			Regions 
				Availability Zones(Data Centers)
					Server1,2,3,4,5,6
					
		Virtual Machines ::
				- Hardware Level Virtualization
				- Used to run the Operating System.
				- VM consume lot of space and time to bootup.
				
		Containerization ::
				- OS level Virtualization
				- Used to run the applications. NOT and Operating System.
				- It is light-weight when compared to VMs.
				- It consume less volume and faster.
				- Each Container run in its own address space, and it is completely isolated from other containers and base OS.
				- It uses the underlying properties of base OS.
					like Namespaces & Control Groups.
					
					
		Consider Containerization ::
		
			Two Perspectives ::
			
			Infra-Structure Perspective :
			
				Jenkins_Master ::	VM 
						Slave1			Java 
						Slave2			Python 
						Slave3			.Net  
						Slave4			Angular 
						Slave5			NodeJS 
						
						
				Jenkins_Master ::	VM 
						Build_Server :: VM 
							Container Engine 
								C1				Java 
								C2              Python 
								C3              .Net  
								C4              Angular
								C5              NodeJS 
			
			
			
			Development/Deployment Perspective :
			
					
			
				Create the source code ::
					Build 					Compiled and created artifacts ::: mywebapp1.war
					Test the war file.		==> openjdk11, tomcat8.5 	==> mywebapp1.war - successfully executed and tested. 
					Eclipse --> jdk, 
							    tomcat 				
					
					Deploy to QA_Server 	==> jdk1.8, tomcat8.0		==> mywebapp1.war ?
			
					
					Deploy to UAT_Server 	==> jdk1.8, tomcat8.0		==> mywebapp1.war ?
					
					
					Deploy to PROD_Server 	==> jdk1.8, tomcat8.0		==> mywebapp1.war ?
					
					
					Containerization :::
						Create the source code ::
							Build 					Compiled and created artifacts ::: mywebapp1.war
							Test the war file.		==> openjdk11, tomcat8.5 	==> mywebapp1.war - successfully executed and tested.	

								Create a Application Package ==> (mywebapp1.war,openjdk11,tomcat8.5)		==> mywebapp1pkg
									Container Image/Package 
						
								Deploy the package to QA_Server 	==> mywebapp1pkg		==> (mywebapp1.war,openjdk11,tomcat8.5)
										Container Engine 
											C1				mywebapp1pkg (mywebapp1.war,openjdk11,tomcat8.5)
											C2              mywebapp2pkg
											C3              mywebapp3pkg
											C4              mywebapp4pkg
											C5              mywebapp5pkg				
								
								Deploy to UAT_Server 	==> jdk1.8, tomcat8.0		==> mywebapp1.war ?
								
								
								Deploy to PROD_Server 	==> jdk1.8, tomcat8.0		==> mywebapp1.war ?						
										

					DevOps :: Docker & Kubernetes.
	
				Terminologies :::
				
					Containerization :
						It is the process of packaging the application along with its dependencies.
					
					Namespace (NS)			--> Used to create independent process to the containers
					Control Groups (CG)		--> Used to create the level of isolation to run the containers in the namespace.
					
					Container Engine 		--> Used to create the container Images, Run the Container, Manage the Container resources.
												It acts as an interface between the underlying OS and the Containers.
					Image					--> Images are the static file, that defines the application and its depedencies.
												Image are Non-Executable.
					Container				--> Containers are Executable unit of Image. 
					Container Registry		--> It is used to Store and Manage the Container Images.
												dockerhub - is the default container registry for Container Images.
												www.hub.docker.com
					Container Repository	--> These are the subset of Container Registry.
					
					
				About Container Registry 
				
				Installation of Container Engine.  https://docs.docker.com/engine/install/
				
						In your slave machine : Ubuntu
						
							sudo -i
							apt update -y
							apt install docker.io -y
							
							docker --version
							
					Virtual Machine :::
						Install the Container Engine 
							Docker 
							
						AWS 	--> ECS,ECR,EKS
						
						Azure 	--> ACS,ACR,AKS
						
						GCP 	--> GCS,GCR,GKS
					
				Container Orchestration Tool ::::
				
					It is used to orchestrate the containers and ensure high availability of containers.
					
						For Docker Containers --> Docker Swarm 
						
						Kubernetes --> Opensource Container Orchestration Tool 
				
				Working with Container Images and Containers::
				
					Docker CLI Commands :::

						docker --version 
						
						docker images 	==> Get the list of container images 
						
						docker ps		==> Get the list of running containers
						
						docker ps -a 	==> Get the list of running as well as stopped containers.
					
					
#################
18th Sep. 2023
#################						

		- How to used docker hub to run the containers 
		
		- How to work with containers ::::
		
		
		
		Open a excel sheet :
		
		GIT 			Jenkins 
		
		
		
		java-mvn-app2
		
		1. Schedule jenkins pipeline project for every 4 hrs to clean the workspace in slave machine?
		
		- Open/import tis repository in eclipse?
		- edit the src - index.jsp?
		- commit the changes?
		
		please let me know the progress
		
		
		
		
					
#################
19th Sep. 2023
#################		
		
		
		Working with Docker 
		
		overview od DockerHub 
		
		
		
		Using Docker Engine, we are gng to create containers 
		
			use the exist images docker hub and create containers 
			Build the user defined/application Image and create the containers.
		
		
		Containerization ::
				- OS level Virtualization
				- Used to run the applications. NOT an Operating System.
				- It is light-weight when compared to VMs.
				- It consume less volume and faster.
				- Each Container run in its own address space, and it is completely isolated from other containers and base OS.
				- It uses the underlying properties of base OS.
					like Namespaces & Control Groups.	

			
			
			docker pull <image_name>:<tag>
			
			docker pull images
			
			docker run centos 
			
			docker run ubuntu
			
			docker run --name=mycontainer1 centos
			
			Container Modes of Execution :::
			
				- Foreground mode / attached mode* (That Terminal will be locked by that container, till the container goes to exit state.
						docker run centos sleep 20
					
				- Background mode / detached mode 
						docker run -d centos sleep 20 
						
				- Interactive Mode
						docker run -it centos		### This will allow to login to container while it is running.
					
			
			Stop the container 
			
			remove the images and container
			
				docker rmi <image_name>
				
				docker rmi -f <imagename>
				
				docker rm <container_id>
				
				
			
			Start and Stop the container ::
			
				docker start <container_id>
				
				docker stop <container_id>
				
			Container Port Mapping/Binding  :::
			
				<external_IP_Addr>:8080		# Accessed the tomcat running in VM.
				
			Port Mapping ==> It is process of mapping the container port with the host port.
			
			docker run -it -p 8085:8080 tomcat:8.0
			
			
				-p <host_port>:<container_port>
				
				
			QA_Server :::
						*.war
						tomcat ==> *.war - 8080
						100 application artifacts (micro-services)
						
						C1 - tomcat appln. 8080
						C2 - tomcat appln. 8081 ..... C100
						
				docker logs <continer_id> 
				
				docker inspect <continer_id>
				
			Container Volumes ::::
			
				Containers are not a permanent entity.
				
				
				Application :::
				
					- Stateless Application 
							The application will not have any trace of execution.
					
					- Stateful Application
							The Applications/service will have the trace of execution in the form of logs/reports/artifacts
							
			Container Volumes are used to run any stateful Application and maintain persistant volumes to permanently store the data generated by the application inside the container.
			
			docker volume list
			
			docker volume create sadevopsvol 
			
			docker volume inspect sadevopsvol
			
			docker run -it --mount source=sadevopsvol,destination=/sadevopsvol centos
			
			To send any input files to container or to access teh output files from container, we use container volume.
			
			
			3-tier application architecture ::::
			
				Micro-Service based architecture :::
				
					sign_in  --> Service (Front End,Application_Logic,BackEnd_DB)	
						
									Service (C1,C2,C3)				
					
			To run multiple containers as a single service we use Docker Compose.

					
			
			
    1  clear
    2  apt update -y
    3  apt install docker.io -y
    4  clear
    5  docker --version
    6  docker images
    7  docker ps
    8  docker ps -a
    9  clear
   10  docker images
   11  docker pull centos
   12  docker images
   13  docker ps -a
   14  docker run centos
   15  docker ps
   16  docker ps -a
   17  docker run centos sleep 30
   18  docker run centos
   19  docker ps -a
   20  clear
   21  docker run centos
   22  docker run ubuntu
   23  docker images
   24  docker ps -a
   25  docker run ubuntu
   26  docker ps -a
   27  clear
   28  docker run centos sleep 10
   29  docker run -d centos sleep 20
   30  docker ps -a
   31  docker ps
   32  clear
   33  docker ps -a
   34  docker run -it centos
   35  clear
   36  docker images
   37  clear
   38  docker images
   39  docker ps -a
   40  docker rm 56c39b4
   41  docker ps -a
   42  docker rmi ubuntu
   43  docker rm b7693a1cabb6 06eae3192684 f39f63fa78ec
   44  docker rmi ubuntu
   45  docker images
   46  docker ps -a
   47  docker run ubuntu
   48  docker ps -a
   49  docker rmi -f ubuntu
   50  docker images
   51  docker ps -a
   52  docker run centos
   53  docker ps -a
   54  docker run --name=testcos centos
   55  docker ps -a
   56  docker images
   57  docker start 97ace191024f
   58  docker ps -a
   59  docker ps
   60  clear
   61  docker ps -a
   62  docker start 9e9a2964a9ed
   63  docker ps
   64  docker start 9e9a2964a9ed
   65  celar
   66  clear
   67  docker ps
   68  docker stop 9e9a2964a9ed
   69  docker ps
   70  clear
   71  docker ps
   72  docker run -it -p 8085:8080 tomcat:8.0
   73  clear
   74  docker run -it -p 8085:8080 tomcat:8.0
   75  history
			
    1  clear
    2  docker ps
    3  docker stop 39fe98983dc3 929dd9742803
    4  docker ps -a
    5  docker start test*
    6  clear
    7  docker ps -a
    8  docker ps
    9  docker log 6841493ed4c0
   10  docker logs 6841493ed4c0
   11  docker inspect 6841493ed4c0
   12  clear
   13  docker images
   14  docker inspect tomcat
   15  docker inspect 5d0da3dc9764
   16  clear
   17  docke images
   18  docker images
   19  docker history ef6a7c98d192
   20  clear
   21  docker images
   22  docker history 5d0da3dc9764
   23  clear
   24  docker run -it centos
   25  clear
   26  docker volume list
   27  docker volume create sadevopsvol
   28  docker volume list
   29  docker volume inspect sadevopsvol
   30  cd /var/lib/docker/volumes/
   31  ls
   32  cd sadevopsvol/
   33  ls
   34  cd _data/
   35  pwd
   36  clear
   37  cd ~
   38  docker ps
   39  docker run -it centos
   40  docker run -it --mount source=sadevopsvol,destination=/sadevopsvol centos
   41  cd /var/lib/docker/volumes/sadevopsvol/_data
   42  ls
   43  cd f
   44  cat file1fromcontainer.txt
   45  echo "rec1" >> filefromhost.txt
   46  ls
   47  cd ~
   48  docker ps -a
   49  clear
   50  docker ps
   51  docker ps -a
   52  docker run -it --mount source=sadevopsvol,destination=/sadevopsvol centos
   53  cd /var/lib/docker/volumes/sadevopsvol/_data
   54  cd ~
   55  history
					
