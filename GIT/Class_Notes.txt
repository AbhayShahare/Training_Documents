#################
1st Sep 2023
#################

      MODULE - 3
			
		Developement Activities :::
		
		In DevOps Workflow :
		
			Coding 
				Commit the code to source code repository(GITHUB)
				
			DevOps Automation :		CI/CD Pipeline --> 
					Compile code 
					Create Artifacts 
					Unit Testing 
					
					Promote to QA Environment
					QA Testing 
					
					Promote to UAT Environment
					UAT Testing
					
					Promote to PROD Environment
					PROD Testing
					Production Monitoring
					
			Continuous Integration
			Continuous Testing 
			Continuous Delivery & Deployment
			Continuous Monitoring
			


	1. Version Control System using GIT :
			
		
		Continuous Developement :::
		
				Source Code ::
					How the source code is managed ????
					
					The Source Code should be maintained in a Common Location/Folder where all team members can able to access.
					
						This is to ensure high availabilty of source code changes.
						
						Shared Folder 
						Share Drives 
					
				Folder - Java_Web_Application :

					index.html 
					
					<html>
					-asdfsd
					-afasdf
					-adfasdf
					-asdfasdfsd
					</html>
			
		
				save -- it just save the file as a static content.
			
				Incremental Changes ::

				index.html 
				
					<html>
					-asdfsd
					-a333333333fasdf
					-3333333333333333adfasdf
					-asdfasdfsd
					-33333333
					-333333333333					
					-333333333
					-333333333333333
					</html>	

					Testing the new changes ... 
					
				Version Control System :::
				
					- Used to version control the source code. 
					- Used to track the source code changes.
					
						index.html_V1.0 --(Tag/version_Number)
						index.html_V1.1	
						index.html_V1.2				
						index.html_V1.3					
						index.html_V1.4				
						index.html_V1.5			
		
			Coding 
				Commit the code to source code repository(GITHUB)
				
			DevOps Automation :		CI/CD Pipeline --> Script --> groovy/yaml  
					Compile code 
					Create Artifacts 
					Unit Testing 
					
					Promote to QA Environment
					QA Testing 
					
					Promote to UAT Environment
					UAT Testing
					
					Promote to PROD Environment
					PROD Testing
					
					
			Version Control System :::
			
				Types of Version Control System :::
				
					Local VCS 
					Centralized VCS 
					Distributed VCS 
					
					
			GIT :::
					Is open source Distributed Version Control System.
					Used to Track the Source Code Changes 
					Used to Version control the Source Code Changes 
					Used to perform Parallel Development.

	
			
			Local Machine :					Remote Servers :
			
				GIT Client 						GIT - github 
				
			Github
			
			gitlab
			Azure Repo 
			AWS Code Commit 
			bit bucket 
				
		
			Repository :::
			
				Is just the collection of Folders and Files.
	
			In your local Machine 
				
						Install GIT Client
		
#################
4th Sep. 2023
#################	


			GIT :::
			
				Installation and Management of GIT Repositories.
				Misc GIT Commands 
				GIT Branching Techniques
				GIT Repository Handling
				
				
			In Windows :
			
				GIT Bash
				GIT Cmd
				GIT GUI
				
			c: d: e:
			
			e:
				mkdir SA-DGP-July
					cd SA-DGP-July 
						mkdir repo1
						mkdir repo1
		
			e: 
				SA-DGP-July
					Repo1
					Repo2
					Repo3
		
		Misc GIT Commands :
		
		Repository : collection of Folders and Files.
		
		
		Local Machine																		Remote Server 
		
		Working Directory	--> Staging Area	--> Local Repository						Remote Repository
		
						index.html_V1.0 --(Tag/version_Number/commit_ID)
						index.html_V1.1	
						index.html_V1.2				
						index.html_V1.3					
						index.html_V1.4				
						index.html_V1.5			
		
		
			index.html ==> 
			
				asdfasdfasdfsdf
				asdfasdfasdffas
				dfassdf
				asdfasdfsd
		
		GIT File WorkFlow ::
		
			Developers WorkLoad :::
			
			-	New Project					
			
			- 	Enhancement Project 		--> Handle Incremental Changes!
			-	Bugfix
		
		
		Misc GIT Commands :
		
		git add 		==> Used to the changes from working directory to staging area.
		git commit		==> Used to commit the changes from staging area to Local Repository.
		git push		==> Used to publish/push the changes from local repository to Remote Repository.
		
		git fetch/pull	==> Both git fetch and pull are used to handle the incremental Changes from remote repository.
		
						==> git fetch is just used to check for any incremental changes in remote repository. If there is any changes exist, it will fetch the changes from remote repository into local repository. NOT working Directory.
							
						==> git pull is used to check for any incremental changes in remote repository. If there is any changes exist, 	it will fetch the changes from remote repository into local repository and update the changes in working Directory as well.
						
		git clone		==>	Used to clone/copy the entire remote git repository to local machine.
							This is always recommended to be the one time activity.
							
		fork			==> Used to copy a remote repository to another remote repository
						
	
		
		Create New Repository in Local Machine using GIT.	

		git init 		==> Used to initialize a new git repository in local machine.
							Create GIT_DIR and a default branch called master.
		
		git status		==> Used to track the status of git repository

		git config ==> Used to setup the default configuration for Author Name and Email ID.
		
			Local Configuration : 	applicable only for a specific repository 

			git config user.name "Loksai"
			git config user.email "Loksai@qww.com"			
			
			Global Configuration :	applicable for all the repositories 
			
			git config --global user.name "Loksai"
			git config --global user.email "Loksaieta@qww.com"		
		
		git add <file_name>
		
		git commit -m "Commit_Message"
		
		
		git config ==> Used to setup the default configuration for Author Name and Email ID.
		
			Local Configuration : 	applicable only for a specific repository 

			git config user.name "Loksai"
			git config user.email "Loksai@qww.com"			
			
			Global Configuration :	applicable for all the repositories 
			
			git config --global user.name "Loksai"
			git config --global user.email "Loksaieta@qww.com"
			
			git add :::
			
				git add <file_name>
			
				git add <file_name> <file_name>
				
				git add *.html 
				
				git add .						# Add all the files from working dir. to staging area.
				
				
				git commit -m "Commit_Message"	
				
