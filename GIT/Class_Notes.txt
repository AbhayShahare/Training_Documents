#################
1st Sep 2023
#################

      MODULE - 3
			
		Developement Activities :::
		
		In DevOps Workflow :
		
			Coding 
				Commit the code to source code repository(GITHUB)
				
			DevOps Automation :		CI/CD Pipeline --> 
					Compile code 
					Create Artifacts 
					Unit Testing 
					
					Promote to QA Environment
					QA Testing 
					
					Promote to UAT Environment
					UAT Testing
					
					Promote to PROD Environment
					PROD Testing
					Production Monitoring
					
			Continuous Integration
			Continuous Testing 
			Continuous Delivery & Deployment
			Continuous Monitoring
			


	1. Version Control System using GIT :
			
		
		Continuous Developement :::
		
				Source Code ::
					How the source code is managed ????
					
					The Source Code should be maintained in a Common Location/Folder where all team members can able to access.
					
						This is to ensure high availabilty of source code changes.
						
						Shared Folder 
						Share Drives 
					
				Folder - Java_Web_Application :

					index.html 
					
					<html>
					-asdfsd
					-afasdf
					-adfasdf
					-asdfasdfsd
					</html>
			
		
				save -- it just save the file as a static content.
			
				Incremental Changes ::

				index.html 
				
					<html>
					-asdfsd
					-a333333333fasdf
					-3333333333333333adfasdf
					-asdfasdfsd
					-33333333
					-333333333333					
					-333333333
					-333333333333333
					</html>	

					Testing the new changes ... 
					
				Version Control System :::
				
					- Used to version control the source code. 
					- Used to track the source code changes.
					
						index.html_V1.0 --(Tag/version_Number)
						index.html_V1.1	
						index.html_V1.2				
						index.html_V1.3					
						index.html_V1.4				
						index.html_V1.5			
		
			Coding 
				Commit the code to source code repository(GITHUB)
				
			DevOps Automation :		CI/CD Pipeline --> Script --> groovy/yaml  
					Compile code 
					Create Artifacts 
					Unit Testing 
					
					Promote to QA Environment
					QA Testing 
					
					Promote to UAT Environment
					UAT Testing
					
					Promote to PROD Environment
					PROD Testing
					
					
			Version Control System :::
			
				Types of Version Control System :::
				
					Local VCS 
					Centralized VCS 
					Distributed VCS 
					
					
			GIT :::
					Is open source Distributed Version Control System.
					Used to Track the Source Code Changes 
					Used to Version control the Source Code Changes 
					Used to perform Parallel Development.

	
			
			Local Machine :					Remote Servers :
			
				GIT Client 						GIT - github 
				
			Github
			
			gitlab
			Azure Repo 
			AWS Code Commit 
			bit bucket 
				
		
			Repository :::
			
				Is just the collection of Folders and Files.
	
			In your local Machine 
				
						Install GIT Client
		
#################
4th Sep. 2023
#################	


			GIT :::
			
				Installation and Management of GIT Repositories.
				Misc GIT Commands 
				GIT Branching Techniques
				GIT Repository Handling
				
				
			In Windows :
			
				GIT Bash
				GIT Cmd
				GIT GUI
				
			c: d: e:
			
			e:
				mkdir SA-DGP-July
					cd SA-DGP-July 
						mkdir repo1
						mkdir repo1
		
			e: 
				SA-DGP-July
					Repo1
					Repo2
					Repo3
		
		Misc GIT Commands :
		
		Repository : collection of Folders and Files.
		
		
		Local Machine																		Remote Server 
		
		Working Directory	--> Staging Area	--> Local Repository						Remote Repository
		
						index.html_V1.0 --(Tag/version_Number/commit_ID)
						index.html_V1.1	
						index.html_V1.2				
						index.html_V1.3					
						index.html_V1.4				
						index.html_V1.5			
		
		
			index.html ==> 
			
				asdfasdfasdfsdf
				asdfasdfasdffas
				dfassdf
				asdfasdfsd
		
		GIT File WorkFlow ::
		
			Developers WorkLoad :::
			
			-	New Project					
			
			- 	Enhancement Project 		--> Handle Incremental Changes!
			-	Bugfix
		
		
		Misc GIT Commands :
		
		git add 		==> Used to the changes from working directory to staging area.
		git commit		==> Used to commit the changes from staging area to Local Repository.
		git push		==> Used to publish/push the changes from local repository to Remote Repository.
		
		git fetch/pull	==> Both git fetch and pull are used to handle the incremental Changes from remote repository.
		
						==> git fetch is just used to check for any incremental changes in remote repository. If there is any changes exist, it will fetch the changes from remote repository into local repository. NOT working Directory.
							
						==> git pull is used to check for any incremental changes in remote repository. If there is any changes exist, 	it will fetch the changes from remote repository into local repository and update the changes in working Directory as well.
						
		git clone		==>	Used to clone/copy the entire remote git repository to local machine.
							This is always recommended to be the one time activity.
							
		fork			==> Used to copy a remote repository to another remote repository
						
	
		
		Create New Repository in Local Machine using GIT.	

		git init 		==> Used to initialize a new git repository in local machine.
							Create GIT_DIR and a default branch called master.
		
		git status		==> Used to track the status of git repository

		git config ==> Used to setup the default configuration for Author Name and Email ID.
		
			Local Configuration : 	applicable only for a specific repository 

			git config user.name "Loksai"
			git config user.email "Loksai@qww.com"			
			
			Global Configuration :	applicable for all the repositories 
			
			git config --global user.name "Loksai"
			git config --global user.email "Loksaieta@qww.com"		
		
		git add <file_name>
		
		git commit -m "Commit_Message"
		
		
		git config ==> Used to setup the default configuration for Author Name and Email ID.
		
			Local Configuration : 	applicable only for a specific repository 

			git config user.name "Loksai"
			git config user.email "Loksai@qww.com"			
			
			Global Configuration :	applicable for all the repositories 
			
			git config --global user.name "Loksai"
			git config --global user.email "Loksaieta@qww.com"
			
			git add :::
			
				git add <file_name>
			
				git add <file_name> <file_name>
				
				git add *.html 
				
				git add .						# Add all the files from working dir. to staging area.
				
				
				git commit -m "Commit_Message"	
				
  503  cd e:
  504  mkdir SA-DGP-JULY
  505  cd SA-DGP-JULY/
  506  pwd
  507  git --version
  508  ls
  509  echo "asdf" >> s1.txt
  510  ls
  511  clear
  512  pwd
  513  mkdir testrepo1
  514  cd testrepo1/
  515  pwd
  516  ls
  517  ls -a
  518  git init
  519  ls
  520  ls -a
  521  cd .git/
  522  ls
  523  cd ..
  524  clear
  525  ls
  526  git status
  527  echo "rec1" >> file1.txt
  528  git status
  529  git add file1.txt
  530  git status
  531  git commit -m "Created file1.txt"
  532  git log
  533  ls
  534  git status
  535  echo "rec1" >> file2.txt
  536  ls
  537  git status
  538  git add file2.txt
  539  git status
  540  git commit -m "created file2.txt"
  541  git status
  542  git log
  543  git config user.name "Loksai"
  544  echo "rec1" >> file3.txt
  545  git add file3.txt
  546  git commit -m "created file3.txt"
  547  git log
  548  cd ..
  549  mkdir testrepo2
  550  cd testrepo2/
  551  git status
  552  git init
  553  ls -a
  554  git status
  555  echo "rec2" >> f1.txt
  556  git add f1.txt
  557  git commit -m "Created f1.txt"
  558  git log
  559  git config --global user.name "Loksai"
  560  git config --global user.email "Loksaieta@qww.com"
  561  echo "rec2" >> f2.txt
  562  git add f2.txt
  563  git commit -m "Created f2.txt"
  564  git log
  565  cd ..
  566  clear
  567  mkdir testrepo3
  568  cd testrepo3/
  569  git init
  570  git status
  571  ls
  572  echo "rec" >> s1.txt
  573  git status
  574  git add s1.txt
  575  git status
  576  git commit -m "initial commit"
  577  git status
  578  git log
  579  clear
  580  ls
  581  echo "rec1" >> w1.java
  582  ls
  583  git status
  584  echo "rec1" >> w2.java
  585  echo "rec1" >> w2.doc
  586  echo "rec1" >> w4.html
  587  git status
  588  echo "rec1" >> w5.html
  589  echo "rec1" >> w4.jsp
  590  echo "rec1" >> w7.jsp
  591  clear
  592  ls
  593  git status
  594  git add w1.java w2.doc
  595  git status
  596  git add *.html
  597  git status
  598  git add .
  599  git status
  600  git commit -m "Created temp files"
  601  git log
  602  ls
  603  git log
  604  history
